import User from '../models/User.js'; import bcrypt from 'bcryptjs'; import jwt from 'jsonwebtoken';
const jwtSecret = process.env.JWT_SECRET || 'change_me'; const jwtExpire = process.env.JWT_EXPIRES_IN || '7d';
export const register = async (req,res)=>{ try{ const {name,email,password} = req.body; if(!name||!email||!password) return res.status(400).json({error:'Missing'}); const ex=await User.findOne({email}); if(ex) return res.status(400).json({error:'Exists'}); const salt=await bcrypt.genSalt(10); const hash=await bcrypt.hash(password,salt); const user=await User.create({name,email,password:hash}); const token=jwt.sign({id:user._id,role:user.role},jwtSecret,{expiresIn:jwtExpire}); res.status(201).json({token,user:{id:user._id,name:user.name,email:user.email,role:user.role}}); }catch(e){console.error(e);res.status(500).json({error:'Server'});} };
export const login = async (req,res)=>{ try{ const {email,password}=req.body; if(!email||!password) return res.status(400).json({error:'Missing'}); const user=await User.findOne({email}); if(!user) return res.status(400).json({error:'Invalid'}); const ok=await bcrypt.compare(password,user.password); if(!ok) return res.status(400).json({error:'Invalid'}); const token=jwt.sign({id:user._id,role:user.role},jwtSecret,{expiresIn:jwtExpire}); res.json({token,user:{id:user._id,name:user.name,email:user.email,role:user.role}}); }catch(e){console.error(e);res.status(500).json({error:'Server'});} };
export const me = async (req,res)=>{ try{ const user=await User.findById(req.user.id).select('-password'); res.json({user}); }catch(e){console.error(e);res.status(500).json({error:'Server'});} };
